library("ggplot2")
library("tidyverse")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='alexkell@elecsimresults', password='b3rz0s4m4dr1dth3h01113s', dbname='elecsim', host='elecsimresults.mysql.database.azure.com')
?dbConnect
?RMySQL::`dbConnect,MySQLConnection-method`
read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
run_1 = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
head(run_1)
ggplot(run_1, aes(x=individual_m, y=individual_c)) + geom_point()
ggplot(run_1, aes(x=individual_m, y=individual_c)) + geom_point() +geom_density2d()
?geom_density2d
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point() +geom_density2d()
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point() + geom_hex()
?geom_hex
?stat_bin2d
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point() + geom_bin2d()
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point() + stat_bin_2d()
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point() + stat_bin_2d(aes(fill=reward))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + geom_point()
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + geom_point()
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex()
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex(colour = cut(..reward.., c(0, 100, 250, 500, 1000, 1500, 2000, 2500, Inf))
)
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex(colour = cut(..value.., c(0, 100, 250, 500, 1000, 1500, 2000, 2500, Inf)))
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex(colour = cut(..reward.., c(0, 100, 250, 500, 1000, 1500, 2000, 2500, Inf)))
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex(colour = cut(reward, c(0, 100, 250, 500, 1000, 1500, 2000, 2500, Inf)))
ggplot(run_1, aes(y=individual_m, x=individual_c, color=reward)) + stat_bin_hex(colour = cut(..reward.., c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.9, 1.0)))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_2d(aes(z = reward))
?stat_summary_2d
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10)
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_grid(~ run_number)
?facet_grid
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_grid(~ run_number, cols=3)
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) +labs(colour="Absolue Error")
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + guides(fill=guide_legend(title="Absolute Percentage Error"))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + guides(fill=guide_legend(title="Absolute \nPercentage Error"))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + guides(fill=guide_legend(title="Absolute \nPercentage \nError"))
ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
filter(run_1, run_number==1)
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex()
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex(bins=10)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=50) + facet_wrap(~ run_number)
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
?stat_summary_hex
p=ggplot(run_1, aes(y=individual_m, x=individual_c, size=count)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number)
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 0.5),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 10),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 50),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
filter(run_1, individual_c<3, individual_m <0.003)
filter(run_1, individual_c<3, individual_m <0.003, individual_m > 0.001)
mean(filter(run_1, individual_c<3, individual_m <0.003, individual_m > 0.001)$reward)
accurate_area = filter(run_1, individual_c<3, individual_m <0.003, individual_m > 0.001)
?geom_bar
?geom_col
accurate_area
?melt
?gatehr
?gather
gather(accurate_area, "key", "value", "coal", "ccgt")
gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear")
gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
head(accurate_area_long)
ggplot(accurate_area_long, aes(x=key, y=value)) stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) + stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) + geom_bar()+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) + geom_col()+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
?stat_summary
?mean_se
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_sdl, position = "dodge")
?mean_sdl
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
?mean_se
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se(mult=2), position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, 2, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge") + geom_point()
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
head(actual_mix_2018)
actual_mix_2018$type = "actual"
actual_mix_2018
head(accurate_area)
ggplot(accurate_area_long, aes(x=key, y=value)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
filter(actual_mix_2018, variable %in% "oil")
filter(actual_mix_2018, variable %in% c("ccgt", 'wind'))
filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
actual_mix_2018_reduced = filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
head(actual_mix_2018_reduced)
accurate_area_long
accurate_area_long$type = 'predicted'
accurate_area_long
rbind(accurate_area_long, actual_mix_2018_reduced)
accurate_area_long
?select
select(accurate_area_long, "key")
actual_mix_2018_reduced
select(accurate_area_long, "key", "type")
?rename
rename(actual_mix_2018_reduced, variable=key)
rename(actual_mix_2018_reduced, key=variable)
head(actual_mix_2018_reduced)
rbind(select(accurate_area_long, "key", "type", "value"), select(actual_mix_2018_reduced, -X1))
select(accurate_area_long, "key", "type", "value")
select(actual_mix_2018_reduced, -X1)
rbind(select(accurate_area_long, "key", "type", "value"), select(actual_mix_2018_reduced, -X1, -year))
head(select(accurate_area_long, "key", "type", "value"))
head(select(actual_mix_2018_reduced, -X1, -year))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
actual_mix_2018_reduced
rbind(select(accurate_area_long, "key", "type", "value"), select(actual_mix_2018_reduced, -X1, -year))
comparison = rbind(select(accurate_area_long, "key", "type", "value"), select(actual_mix_2018_reduced, -X1, -year))
ggplot(comparison, aes(x=key, y=value, color=type)) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(comparison, aes(x=key, y=value, color=type, position="dodge")) +
stat_summary(geom = "bar", fun.y = mean)+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
?stat_summary
ggplot(comparison, aes(x=key, y=value, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge", position = "dodge2")
ggplot(comparison, aes(x=key, y=value, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
actual_mix_2018_reduced
comparison
accurate_area_long
accurate_area_long = gather(accurate_area, "key", "value", "id", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long
accurate_area_long %>% group_by("id")
accurate_area_long %>% group_by(id)
run_1 = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
head(run_1)
tail(run_1)
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex(bins=10)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
accurate_area_long_perc %>% groupby(id) %>% sum(value_perc)
accurate_area_long_perc = accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
accurate_area_long_perc %>% groupby(id) %>% sum(value_perc)
accurate_area_long_perc %>% group_by(id) %>% sum(value_perc)
head(accurate_area_long_perc)
accurate_area_long_perc %>% group_by(id) %>% summarise(total_sum = sum(value_perc))
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long_perc = accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
head(actual_mix_2018)
actual_mix_2018$type = "actual"
actual_mix_2018
actual_mix_2018 %>% mutate(value_perc = value/sum(value_perc))
actual_mix_2018 %>% mutate(value_perc = value/sum(value))
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
head(actual_mix_2018)
actual_mix_2018$type = "actual"
actual_mix_2018
actual_mix_2018_reduced = filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
actual_mix_2018_reduced %>% mutate(value_perc = value/sum(value))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
head(actual_mix_2018_reduced)
actual_mix_2018_reduced = actual_mix_2018_reduced %>% mutate(value_perc = value/sum(value))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
actual_mix_2018_reduced
head(actual_mix_2018_reduced)
accurate_area_long$type = 'predicted'
accurate_area_long
comparison = rbind(select(accurate_area_long, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
accurate_area_long
accurate_area_long
View(accurate_area_long_perc)
accurate_area_long_perc$type = 'predicted'
accurate_area_long_perc
comparison = rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
select(accurate_area_long_perc, "key", "type", "value", 'value_perc')
select(actual_mix_2018_reduced, -X1, -year)
actual_mix_2018_reduced
comparison = rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(rename(actual_mix_2018_reduced, id=X1), -X1, -year))
actual_mix_2018_reduced
?rename
rename(actual_mix_2018_reduced, X1=id)
comparison = rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, id, -year))
select(actual_mix_2018_reduced, id, -year)
select(actual_mix_2018_reduced, -id, -year)
comparison = rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -'id', -'year'))
select(accurate_area_long_perc, "key", "type", "value", 'value_perc')
actual_mix_2018_reduced
select(actual_mix_2018_reduced, -'id', -'year')
select(actual_mix_2018_reduced, -id, -year)
actual_mix_2018_reduced
comparison = rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
actual_mix_2018_reduced
rbind(select(accurate_area_long_perc, "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
select(accurate_area_long_perc, "key", "type", "value", 'value_perc')
comparison = rbind(select(ungroup(accurate_area_long_perc), "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggsave("~/Desktop/genetic_algorithm_progression.png")
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
print(p)
ggsave("~/Desktop/genetic_algorithm_progression.png")
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggsave('~/Desktop/average_error_of_best_params.png')
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge")
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge2")
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_sdl, position = "dodge2")
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge2")
library("tidyverse")
library("ggplot2")
run_1 = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
tail(run_1)
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex(bins=10)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
ggsave("~/Desktop/genetic_algorithm_progression.png")
accurate_area = filter(run_1, individual_c<-3, individual_m <0.003, individual_m > 0.001)
accurate_area
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long_perc = accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
actual_mix_2018$type = "actual"
actual_mix_2018
actual_mix_2018_reduced = filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
actual_mix_2018_reduced = actual_mix_2018_reduced %>% mutate(value_perc = value/sum(value))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
head(actual_mix_2018_reduced)
accurate_area_long_perc$type = 'predicted'
accurate_area_long_perc
comparison = rbind(select(ungroup(accurate_area_long_perc), "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge2")
ggsave('~/Desktop/average_error_of_best_params.png')
library("tidyverse")
library("ggplot2")
run_1 = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
tail(run_1)
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex(bins=10)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
ggsave("~/Desktop/genetic_algorithm_progression.png")
accurate_area = filter(run_1, individual_c>-3, individual_m <0.003)#, individual_m > 0.001)
accurate_area
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long_perc = accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
actual_mix_2018$type = "actual"
actual_mix_2018
actual_mix_2018_reduced = filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
actual_mix_2018_reduced = actual_mix_2018_reduced %>% mutate(value_perc = value/sum(value))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
head(actual_mix_2018_reduced)
accurate_area_long_perc$type = 'predicted'
accurate_area_long_perc
comparison = rbind(select(ungroup(accurate_area_long_perc), "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge2")
ggsave('~/Desktop/average_error_of_best_params.png')
library("tidyverse")
library("ggplot2")
run_1 = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/run/validation-optimisation/data/run_2.csv')
tail(run_1)
ggplot(filter(run_1, run_number==1), aes(y=individual_m, x=individual_c)) + geom_hex(bins=10)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = reward), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Absolute \nPercentage \nError"
print(p)
ggsave("~/Desktop/genetic_algorithm_progression.png")
accurate_area = filter(run_1, individual_c<-3, individual_m <0.003, individual_m > 0.001)
accurate_area
accurate_area_long = gather(accurate_area, "key", "value", "coal", "ccgt", "wind", "nuclear", "solar")
accurate_area_long_perc = accurate_area_long %>% group_by(id) %>% mutate(value_perc = value/sum(value))
actual_mix = read_csv('/Users/b1017579/Documents/PhD/Projects/10. ELECSIM/elecsim/data/processed/electricity_mix/energy_mix_historical.csv')
actual_mix_2018 = filter(actual_mix, year==2018)
actual_mix_2018$type = "actual"
actual_mix_2018
actual_mix_2018_reduced = filter(actual_mix_2018, variable %in% c("ccgt", 'wind', 'nuclear', 'solar', 'coal'))
actual_mix_2018_reduced = actual_mix_2018_reduced %>% mutate(value_perc = value/sum(value))
actual_mix_2018_reduced = rename(actual_mix_2018_reduced, key=variable)
head(actual_mix_2018_reduced)
accurate_area_long_perc$type = 'predicted'
accurate_area_long_perc
comparison = rbind(select(ungroup(accurate_area_long_perc), "key", "type", "value", 'value_perc'), select(actual_mix_2018_reduced, -X1, -year))
ggplot(comparison, aes(x=key, y=value_perc, fill=type)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge2")+ stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge2")
ggsave('~/Desktop/average_error_of_best_params.png')
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
print(p)
ggsave('~/Desktop/time-taken-parameters.png')
ggplot(run_1, aes(x=run_number, y=time_taken)) + geom_point()
ggplot(run_1, aes(x=run_number, y=time_taken)) + geom_point() +
geom_smooth(method='lm')
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=10) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=1) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=100) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
print(p)
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=30) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
p=ggplot(run_1, aes(y=individual_m, x=individual_c)) + stat_summary_hex(aes(z = time_taken), bins=30) + facet_wrap(~ run_number) + scale_x_continuous(breaks = round(seq(min(run_1$individual_c), max(run_1$individual_c), by = 25),1))
p$labels$fill <- "Time \n Taken"
print(p)
print(p)
ggsave('~/Desktop/time-taken-parameters.png')
